{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/Alert/index.js","components/Links/index.js","Characters.js","App.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","key","id","alt","name","src","image","value","onClick","characterSelected","Wrapper","children","Navbar","href","score","highScore","Jumbotron","Alert","alertType","role","alertMessage","Links","target","randomizeCards","array","characterNumber","length","index","Math","floor","random","temporaryPlaceHolder","Character","state","characters","gameOver","selectedCharacters","successMessageCounter","counter","_this","includes","setState","newGame","scoreIncrement","push","selectedMessage","theScore","resetCharacterCards","newCardLayout","_this2","this","components_Navbar","components_Jumbotron","components_Alert","components_Wrapper","map","character","components_CharacterCard","components_Links","Component","App","Characters","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0a144e35.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n    return(\n        <div className=\"card\" key={props.id}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} value={props.id} onClick={() => props.characterSelected(props.id)}/>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar (props) {\n    return (\n        <nav className=\"navbar sticky-top navbar-dark bg-primary\">\n            <a className=\"navbar-brand\" href=\"/\">\n                <h3><strong>Avatar Memory Game</strong></h3>\n            </a>\n            <ul className=\"nav\">\n                <li className=\"nav-item\">\n                    <h3 className=\"nav-link\"><strong>Score: {props.score}</strong></h3>\n                </li>\n                <li className=\"nav-item\">\n                    <h3 className=\"nav-link\"><strong>High-Score: {props.highScore}</strong></h3>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return(\n        <div className=\"jumbotron jumbotron-fluid bg-clear text-center\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Avatar the Last Airbender Memory Game</h1>\n                <p className=\"lead\">Try to remember which characters you have clicked and which ones you haven't!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Alert(props) {\n\n    return(\n        <div className={props.alertType} role=\"alert\">\n            <h4>{props.alertMessage}</h4>\n        </div>\n    )\n}\n\nexport default Alert;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Links () {\n  return (\n    <div className=\"links\">\n      <a href=\"https://pkennedytx1.com\" target=\"_blank\">Creator Website</a> | <a href=\"https://github.com/pkennedytx1/Clicky-game\" target=\"_blank\">Github Link</a>\n    </div>\n    )\n  }\n\nexport default Links;","import React, { Component } from \"react\";\nimport characters from \"./characters.json\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Alert from \"./components/Alert\";\nimport Links from \"./components/Links\";\n\n// Function for randomizing the cards\nconst randomizeCards = (array) => {\n    let characterNumber = array.length;\n    while (characterNumber > 0) {\n        let index = Math.floor(Math.random() * characterNumber);\n        characterNumber--;\n        let temporaryPlaceHolder = array[characterNumber];\n        array[characterNumber] = array[index];\n        array[index] = temporaryPlaceHolder;\n    }\n    return array\n}\n\nclass Character extends Component {\n    state = {\n        characters,\n        score: 0,\n        highScore: 0,\n        gameOver: false,\n        selectedCharacters: [],\n        alertType: \"alert alert-primary\",\n        alertMessage: \"Please click a character to begin!\",\n        successMessageCounter: 0\n    };\n\n    componentDidMount() {\n        // neeed to figure out to put on the on mount function\n    }\n\n    characterSelected = (id) => {\n        let counter = this.state.successMessageCounter;\n        if(!this.state.selectedCharacters.includes(id)) {\n            this.scoreIncrement();\n            this.state.selectedCharacters.push(id);\n            this.setState({ gameOver: false })\n            this.setState({alertType: \"alert alert-success\"})\n            \n            // Code for Success Messages\n            const allMessages =[\"Good job!\", \"Well done!\", \"One more down.\", \"Flameo!\", \"Nice one!\", \"Good memory!\", \"Wow, impressive\", \"Don't get cocky now!\", \"I'm impressed\", \"You might give guru Patik a run for his money!\", \"Getting harder?\", \"Just a few more!\", \"Dont't forget anyone!\", \"So, close!\", \"Avatar memory state!\", \"Goodjob! You got them all! Click a character to play again!\"];\n            let selectedMessage = [allMessages[counter]]\n            this.setState({alertMessage: selectedMessage})\n            this.setState({successMessageCounter: this.state.successMessageCounter + 1})\n        } else {\n            this.setState({alertType: \"alert alert-danger\"})\n            this.setState({alertMessage: \"Sorry, you already guessed this chracter. Please click a character to restart the game!\"})\n            this.newGame();\n        }\n    }\n\n    scoreIncrement = () => {\n        let theScore = this.state.score + 1;\n        // Winning scenerio \n        if ( theScore === this.state.characters.length) {\n            this.setState({\n                characters,\n                score: 0,\n                highScore: theScore,\n                gameOver: false,\n                selectedCharacters: []\n            });\n        } else if ( theScore > this.state.highScore) {\n            this.setState({\n                highScore: theScore,\n                score: theScore,\n            });\n        } else {\n            this.setState({\n                score: theScore\n            });\n        }\n        this.resetCharacterCards();\n    };\n\n    newGame = () => {\n        this.setState({\n            score: 0,\n            theScore: 0, \n            highScore: this.state.highScore,\n            selectedCharacters: [],\n            characters,\n            gameOver: true,\n            successMessageCounter: 0,\n        });\n        this.resetCharacterCards();\n    }\n\n    resetCharacterCards = () => {\n        let newCardLayout = randomizeCards(characters);\n        this.setState({ characters: newCardLayout});\n    }\n\n    render() {\n        return (\n            <div>\n            <Navbar \n                score={this.state.score}\n                highScore={this.state.highScore}\n            />\n            <Jumbotron/>\n            <Alert \n                alertType={this.state.alertType}\n                alertMessage={this.state.alertMessage}\n            />\n            <Wrapper>\n                {this.state.characters.map(character => (\n                    <CharacterCard \n                        characterSelected={this.characterSelected}\n                        id={character.id}\n                        key={character.id}\n                        name={character.name}\n                        image={character.image}\n                    />\n                ))}\n            </Wrapper>\n            <Links />\n            </div>\n        )\n    }\n}\n\nexport default Character;\n","import React from \"react\";\nimport Character from \"./Characters\";\n\nfunction App() {\n    return (\n    <div>    \n        <Character />\n    </div>    \n    )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}